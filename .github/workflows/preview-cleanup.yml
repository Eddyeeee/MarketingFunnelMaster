name: Preview Deployment Cleanup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no deletions)'
        required: false
        default: 'false'
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  cleanup-stale-previews:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          npm install -g vercel
          npm install @vercel/client

      - name: Run Cleanup Script
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DRY_RUN: ${{ inputs.dry_run || 'false' }}
        run: |
          node << 'EOF'
          const { createClient } = require('@vercel/client');
          
          async function cleanupStaleDeployments() {
            const client = createClient(process.env.VERCEL_TOKEN);
            const teamId = process.env.VERCEL_ORG_ID;
            const projectId = process.env.VERCEL_PROJECT_ID;
            const dryRun = process.env.DRY_RUN === 'true';
            
            console.log(`🧹 Starting preview deployment cleanup...`);
            console.log(`Dry run: ${dryRun}`);
            
            try {
              // Get all deployments
              const { deployments } = await client.get(`/v13/deployments`, {
                teamId,
                projectId,
                target: 'preview',
                limit: 100
              });
              
              const now = Date.now();
              const sevenDaysAgo = now - (7 * 24 * 60 * 60 * 1000);
              const oneDayAgo = now - (24 * 60 * 60 * 1000);
              
              let deletedCount = 0;
              let keptCount = 0;
              
              for (const deployment of deployments) {
                const age = now - deployment.created;
                const prNumber = deployment.meta?.gitHubPrNumber;
                
                // Keep conditions
                if (deployment.state === 'BUILDING' || deployment.state === 'DEPLOYING') {
                  console.log(`⏳ Keeping active deployment: ${deployment.uid}`);
                  keptCount++;
                  continue;
                }
                
                // Delete conditions
                let shouldDelete = false;
                let reason = '';
                
                // Delete if older than 7 days
                if (deployment.created < sevenDaysAgo) {
                  shouldDelete = true;
                  reason = 'older than 7 days';
                }
                
                // Delete if failed and older than 1 day
                if (deployment.state === 'ERROR' && deployment.created < oneDayAgo) {
                  shouldDelete = true;
                  reason = 'failed deployment older than 1 day';
                }
                
                // Delete if PR is closed (would need GitHub API check)
                // For now, delete orphaned deployments without PR metadata
                if (!prNumber && deployment.created < oneDayAgo) {
                  shouldDelete = true;
                  reason = 'orphaned deployment without PR metadata';
                }
                
                if (shouldDelete) {
                  if (dryRun) {
                    console.log(`🔍 Would delete: ${deployment.uid} (${reason})`);
                  } else {
                    try {
                      await client.delete(`/v13/deployments/${deployment.uid}`, { teamId });
                      console.log(`🗑️  Deleted: ${deployment.uid} (${reason})`);
                      deletedCount++;
                    } catch (error) {
                      console.error(`❌ Failed to delete ${deployment.uid}: ${error.message}`);
                    }
                  }
                } else {
                  keptCount++;
                }
              }
              
              console.log(`\n✅ Cleanup complete!`);
              console.log(`📊 Stats: ${deletedCount} deleted, ${keptCount} kept`);
              
            } catch (error) {
              console.error('Cleanup failed:', error);
              process.exit(1);
            }
          }
          
          cleanupStaleDeployments();
          EOF

      - name: Cleanup Report
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const summary = `Preview deployment cleanup completed on ${date}`;
            
            // Create issue if significant number of deployments cleaned
            if (process.env.CLEANUP_COUNT > 20) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `High number of preview deployments cleaned: ${date}`,
                body: `The cleanup job removed ${process.env.CLEANUP_COUNT} preview deployments. This might indicate PRs are not being closed properly.`,
                labels: ['deployment', 'maintenance']
              });
            }